### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AppError {
  createdAt: String!
  message: String!
  name: String!
}

input CreateProgramInput {
  name: String!
  publicity: Publicity!
  tags: [String!]!
  trainingType: [TrainingType!]!
  userId: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum Equipment {
  ball
  band
  barbell
  bench
  bodyweight
  box
  cable
  dumbbell
  foam_roller
  kettlebell
  machine
  medicine_ball
  resistance_band
  sandbag
  sled
  suspension_trainer
  trap_bar
  weighted_vest
}

type Exercise {
  authorNotes: String
  id: ID!
  order: Int!
  sets: [Set!]!
  staticExercise: StaticExercise!
  supersetOrder: String
}

enum Gender {
  female
  male
}

input LoginInput {
  password: String!
  username: String!
}

enum Movement {
  anti_extension
  anti_lateral_flexion
  anti_rotation
  carry
  elevation
  explosive
  extension
  external_rotation
  flexion
  hip_dominant
  horizontal_pull
  horizontal_push
  internal_rotation
  isolation
  knee_dominant
  rotation
  vertical_pull
  vertical_push
}

enum Muscle {
  abductors
  abs
  adductor
  back_deltoids
  biceps
  calves
  chest
  forearm
  front_deltoids
  gluteal
  hamstring
  head
  lower_back
  middle_deltoids
  neck
  obliques
  quadriceps
  trapezius
  triceps
  upper_back
}

type Mutation {
  createExercise(staticExerciseId: String!, workoutId: String!): Exercise
  createProgram(input: CreateProgramInput!): Program
  createSet(exerciseId: String!): Set
  createWorkout(programId: String!): Workout
  finishWorkout(performedWorkoutId: String!): PerformedWorkout
  login(input: LoginInput!): String
  signup(input: SignUpInput!): Boolean
  startWorkout(workoutId: String!): PerformedWorkout
  updateCompletionStatus(currentStatus: Boolean!, performedSetId: String!): PerformedSet
  updateSetReps(reps: Int!, setId: String!): Set
  updateSetRpe(rpe: Int!, setId: String!): Set
}

type PerformedExercise {
  exercise: Exercise!
  id: ID!
  notes: String!
  performedSets: [PerformedSet!]!
  performedWorkout: PerformedWorkout!
}

type PerformedSet {
  completed: Boolean!
  completedAt: DateTime
  duration: Int
  id: ID!
  performedExercise: PerformedExercise
  reps: Int
  set: Set!
  weight: Float
}

type PerformedWorkout {
  active: Boolean!
  createdAt: DateTime!
  duration: Int!
  id: ID!
  notes: String!
  performedExercises: [PerformedExercise!]!
  program: Program!
  tonnage: Float!
  workout: Workout!
}

type Profile {
  authoredPrograms: [Program!]!
  createdAt: DateTime!
  dateOfBirth: DateTime
  gender: Gender
  goals: [TrainingType!]!
  height: Int
  id: ID!
  name: String!
  performedWorkouts: [PerformedWorkout!]!
  programLibrary: [Program!]!
  trainingAge: TrainingLevel
  updatedAt: DateTime!
  user: User!
  username: String!
  weight: Int
}

type Program {
  authors: [Profile!]!
  complimentary: Boolean
  id: ID!
  inLibraryOf: [Profile!]!
  name: String!
  performedWorkouts: [PerformedWorkout!]!
  publicity: Publicity!
  trainingLevel: TrainingLevel
  trainingType: [TrainingType!]!
  workouts: [Workout!]!
}

enum Publicity {
  friends
  private
  public
}

type Query {
  activeWorkout: PerformedWorkout
  emailExists(email: String!): Boolean
  exercise(exerciseId: String!): Exercise
  exerciseHistory(currentPerformedExercise: String, exerciseId: String!): [PerformedExercise!]!
  me: User
  popularPrograms(skip: Int!, take: Int!, trainingType: [TrainingType!]): [Program!]!
  program(programId: String!): Program
  staticExercise(staticExerciseId: String!): StaticExercise
  staticExercises: [StaticExercise!]!
  trainingTypes: [TrainingType!]!
  trendingPrograms(skip: Int!, take: Int!, trainingType: [TrainingType!]): [Program!]!
  userPrograms: [Program!]!
  usernameExists(username: String!): Boolean
  workout(workoutId: String!): Workout
}

type Set {
  exercise: Exercise!
  id: ID!
  number: Int!
  reps: Int!
  rpe: Int!
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
  username: String!
}

type StaticExercise {
  createdAt: DateTime!
  description: String!
  equipment: Equipment
  exercise: [Exercise!]!
  id: ID!
  movement: Movement!
  name: String!
  primaryTargetMuscle: Muscle!
  secondaryTargetMuscle: Muscle
  tertiaryTargetMuscle: Muscle
  updatedAt: DateTime!
}

enum TrainingLevel {
  advanced
  beginner
  intermediate
}

enum TrainingType {
  aerobics
  boxing
  calisthenics
  cardio
  crossfit
  cycling
  functional_training
  gymnastics
  hiit
  hypertrophy
  martial_arts
  olympic_weightlifting
  pilates
  recovery
  rowing
  running
  sports_performance
  strength
  stretching
  swimming
  wellness
}

type User {
  email: String!
  id: ID!
  password: String!
  profile: Profile
}

type UserResponse {
  error: AppError
  user: User
}

type Workout {
  exercises: [Exercise!]!
  id: ID!
  name: String!
  programId: String
  trainingLevel: TrainingLevel
  trainingType: [TrainingType!]!
}