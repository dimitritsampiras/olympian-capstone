/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type { AppContext as ctx } from './../server/context';

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateProgramInput: {
    // input type
    name: string; // String!
    publicity: NexusGenEnums['Publicity']; // Publicity!
    tags: string[]; // [String!]!
    trainingType: NexusGenEnums['TrainingType'][]; // [TrainingType!]!
    userId: string; // String!
  };
  LoginInput: {
    // input type
    password: string; // String!
    username: string; // String!
  };
  SignUpInput: {
    // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
    username: string; // String!
  };
}

export interface NexusGenEnums {
  Equipment:
    | 'ball'
    | 'band'
    | 'barbell'
    | 'bench'
    | 'bodyweight'
    | 'box'
    | 'cable'
    | 'dumbbell'
    | 'foam_roller'
    | 'kettlebell'
    | 'machine'
    | 'medicine_ball'
    | 'resistance_band'
    | 'sandbag'
    | 'sled'
    | 'suspension_trainer'
    | 'trap_bar'
    | 'weighted_vest';
  Gender: 'female' | 'male';
  Movement:
    | 'anti_extension'
    | 'anti_lateral_flexion'
    | 'anti_rotation'
    | 'carry'
    | 'elevation'
    | 'explosive'
    | 'extension'
    | 'external_rotation'
    | 'flexion'
    | 'hip_dominant'
    | 'horizontal_pull'
    | 'horizontal_push'
    | 'internal_rotation'
    | 'isolation'
    | 'knee_dominant'
    | 'rotation'
    | 'vertical_pull'
    | 'vertical_push';
  Muscle:
    | 'abductors'
    | 'abs'
    | 'adductor'
    | 'back_deltoids'
    | 'biceps'
    | 'calves'
    | 'chest'
    | 'forearm'
    | 'front_deltoids'
    | 'gluteal'
    | 'hamstring'
    | 'head'
    | 'lower_back'
    | 'middle_deltoids'
    | 'neck'
    | 'obliques'
    | 'quadriceps'
    | 'trapezius'
    | 'triceps'
    | 'upper_back';
  Publicity: 'friends' | 'private' | 'public';
  TrainingLevel: 'advanced' | 'beginner' | 'intermediate';
  TrainingType:
    | 'aerobics'
    | 'boxing'
    | 'calisthenics'
    | 'cardio'
    | 'crossfit'
    | 'cycling'
    | 'functional_training'
    | 'gymnastics'
    | 'hiit'
    | 'hypertrophy'
    | 'martial_arts'
    | 'olympic_weightlifting'
    | 'recovery'
    | 'rowing'
    | 'running'
    | 'sports_performance'
    | 'strength'
    | 'stretching'
    | 'swimming'
    | 'wellness';
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenObjects {
  AppError: {
    // root type
    createdAt: string; // String!
    message: string; // String!
    name: string; // String!
  };
  Exercise: {
    // root type
    authorNotes?: string | null; // String
    id: string; // ID!
    order: number; // Int!
    supersetOrder?: string | null; // String
  };
  Mutation: {};
  PerformedExercise: {
    // root type
    id: string; // ID!
    notes: string; // String!
  };
  PerformedSet: {
    // root type
    completed: boolean; // Boolean!
    completedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    duration?: number | null; // Int
    id: string; // ID!
    reps?: number | null; // Int
    weight?: number | null; // Float
  };
  PerformedWorkout: {
    // root type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    duration: number; // Int!
    id: string; // ID!
    notes: string; // String!
    tonnage: number; // Float!
  };
  Profile: {
    // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    dateOfBirth?: NexusGenScalars['DateTime'] | null; // DateTime
    defaultColor: string; // String!
    gender?: NexusGenEnums['Gender'] | null; // Gender
    goals: NexusGenEnums['TrainingType'][]; // [TrainingType!]!
    height?: number | null; // Int
    id: string; // ID!
    name: string; // String!
    trainingAge?: NexusGenEnums['TrainingLevel'] | null; // TrainingLevel
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    username: string; // String!
    weight?: number | null; // Int
  };
  Program: {
    // root type
    complimentary?: boolean | null; // Boolean
    defaultEmojiHex: string; // String!
    defaultImageColor: string; // String!
    id: string; // ID!
    likes?: number | null; // Int
    name: string; // String!
    publicity: NexusGenEnums['Publicity']; // Publicity!
    trainingLevel?: NexusGenEnums['TrainingLevel'] | null; // TrainingLevel
    trainingType: NexusGenEnums['TrainingType'][]; // [TrainingType!]!
  };
  Query: {};
  Set: {
    // root type
    id: string; // ID!
    number: number; // Int!
    reps: number; // Int!
    rpe: number; // Int!
  };
  StaticExercise: {
    // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    equipment?: NexusGenEnums['Equipment'] | null; // Equipment
    id: string; // ID!
    movement: NexusGenEnums['Movement']; // Movement!
    name: string; // String!
    primaryTargetMuscle: NexusGenEnums['Muscle']; // Muscle!
    secondaryTargetMuscle?: NexusGenEnums['Muscle'] | null; // Muscle
    tertiaryTargetMuscle?: NexusGenEnums['Muscle'] | null; // Muscle
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  };
  User: {
    // root type
    email: string; // String!
    id: string; // ID!
    password: string; // String!
  };
  UserResponse: {
    // root type
    error?: NexusGenRootTypes['AppError'] | null; // AppError
    user?: NexusGenRootTypes['User'] | null; // User
  };
  Workout: {
    // root type
    id: string; // ID!
    name: string; // String!
    programId?: string | null; // String
    trainingLevel?: NexusGenEnums['TrainingLevel'] | null; // TrainingLevel
    trainingType: NexusGenEnums['TrainingType'][]; // [TrainingType!]!
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {
  BrowseResponseTypeUnion:
    | NexusGenRootTypes['Exercise']
    | NexusGenRootTypes['Profile']
    | NexusGenRootTypes['Program']
    | NexusGenRootTypes['Workout'];
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums;

export interface NexusGenFieldTypes {
  AppError: {
    // field return type
    createdAt: string; // String!
    message: string; // String!
    name: string; // String!
  };
  Exercise: {
    // field return type
    authorNotes: string | null; // String
    id: string; // ID!
    order: number; // Int!
    sets: NexusGenRootTypes['Set'][]; // [Set!]!
    staticExercise: NexusGenRootTypes['StaticExercise']; // StaticExercise!
    supersetOrder: string | null; // String
  };
  Mutation: {
    // field return type
    addProgramToLibrary: NexusGenRootTypes['Profile'] | null; // Profile
    createExercise: NexusGenRootTypes['Exercise'] | null; // Exercise
    createProgram: NexusGenRootTypes['Program'] | null; // Program
    createSet: NexusGenRootTypes['Set'] | null; // Set
    createWorkout: NexusGenRootTypes['Workout'] | null; // Workout
    finishWorkout: NexusGenRootTypes['PerformedWorkout'] | null; // PerformedWorkout
    follow: NexusGenRootTypes['Profile'] | null; // Profile
    login: string | null; // String
    signup: boolean | null; // Boolean
    startWorkout: NexusGenRootTypes['PerformedWorkout'] | null; // PerformedWorkout
    unfollow: NexusGenRootTypes['Profile'] | null; // Profile
    updateCompletionStatus: NexusGenRootTypes['PerformedSet'] | null; // PerformedSet
    updateProgramIcon: NexusGenRootTypes['Program'] | null; // Program
    updateSetReps: NexusGenRootTypes['Set'] | null; // Set
    updateSetRpe: NexusGenRootTypes['Set'] | null; // Set
    updateWorkoutName: NexusGenRootTypes['Workout'] | null; // Workout
  };
  PerformedExercise: {
    // field return type
    exercise: NexusGenRootTypes['Exercise']; // Exercise!
    id: string; // ID!
    notes: string; // String!
    performedSets: NexusGenRootTypes['PerformedSet'][]; // [PerformedSet!]!
    performedWorkout: NexusGenRootTypes['PerformedWorkout']; // PerformedWorkout!
  };
  PerformedSet: {
    // field return type
    completed: boolean; // Boolean!
    completedAt: NexusGenScalars['DateTime'] | null; // DateTime
    duration: number | null; // Int
    id: string; // ID!
    performedExercise: NexusGenRootTypes['PerformedExercise'] | null; // PerformedExercise
    reps: number | null; // Int
    set: NexusGenRootTypes['Set']; // Set!
    weight: number | null; // Float
  };
  PerformedWorkout: {
    // field return type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    duration: number; // Int!
    id: string; // ID!
    notes: string; // String!
    performedExercises: NexusGenRootTypes['PerformedExercise'][]; // [PerformedExercise!]!
    profile: NexusGenRootTypes['Profile']; // Profile!
    program: NexusGenRootTypes['Program']; // Program!
    tonnage: number; // Float!
    workout: NexusGenRootTypes['Workout']; // Workout!
  };
  Profile: {
    // field return type
    authoredPrograms: NexusGenRootTypes['Program'][]; // [Program!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    dateOfBirth: NexusGenScalars['DateTime'] | null; // DateTime
    defaultColor: string; // String!
    followedBy: NexusGenRootTypes['Profile'][]; // [Profile!]!
    following: NexusGenRootTypes['Profile'][]; // [Profile!]!
    gender: NexusGenEnums['Gender'] | null; // Gender
    goals: NexusGenEnums['TrainingType'][]; // [TrainingType!]!
    height: number | null; // Int
    id: string; // ID!
    name: string; // String!
    performedWorkouts: NexusGenRootTypes['PerformedWorkout'][]; // [PerformedWorkout!]!
    programLibrary: NexusGenRootTypes['Program'][]; // [Program!]!
    trainingAge: NexusGenEnums['TrainingLevel'] | null; // TrainingLevel
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    username: string; // String!
    weight: number | null; // Int
  };
  Program: {
    // field return type
    authors: NexusGenRootTypes['Profile'][]; // [Profile!]!
    complimentary: boolean | null; // Boolean
    defaultEmojiHex: string; // String!
    defaultImageColor: string; // String!
    id: string; // ID!
    inLibraryOf: NexusGenRootTypes['Profile'][]; // [Profile!]!
    likes: number | null; // Int
    name: string; // String!
    performedWorkouts: NexusGenRootTypes['PerformedWorkout'][]; // [PerformedWorkout!]!
    publicity: NexusGenEnums['Publicity']; // Publicity!
    trainingLevel: NexusGenEnums['TrainingLevel'] | null; // TrainingLevel
    trainingType: NexusGenEnums['TrainingType'][]; // [TrainingType!]!
    workouts: NexusGenRootTypes['Workout'][]; // [Workout!]!
  };
  Query: {
    // field return type
    activeFollowers: NexusGenRootTypes['PerformedWorkout'][]; // [PerformedWorkout!]!
    activeWorkout: NexusGenRootTypes['PerformedWorkout'] | null; // PerformedWorkout
    browseSearch: NexusGenRootTypes['BrowseResponseTypeUnion'][]; // [BrowseResponseTypeUnion!]!
    emailExists: boolean | null; // Boolean
    exercise: NexusGenRootTypes['Exercise'] | null; // Exercise
    exerciseHistory: NexusGenRootTypes['PerformedExercise'][]; // [PerformedExercise!]!
    followerWorkoutActivity: NexusGenRootTypes['PerformedWorkout'][]; // [PerformedWorkout!]!
    lastPerformedWorkout: NexusGenRootTypes['PerformedWorkout'] | null; // PerformedWorkout
    me: NexusGenRootTypes['User'] | null; // User
    myFollowers: NexusGenRootTypes['Profile'][]; // [Profile!]!
    myFollowersCount: number; // Int!
    myFollows: NexusGenRootTypes['Profile'][]; // [Profile!]!
    myFollowsCount: number; // Int!
    myProfile: NexusGenRootTypes['Profile'] | null; // Profile
    performedWorkoutFromId: NexusGenRootTypes['PerformedWorkout'] | null; // PerformedWorkout
    popularPrograms: NexusGenRootTypes['Program'][]; // [Program!]!
    profileFromId: NexusGenRootTypes['Profile'] | null; // Profile
    profilePrograms: NexusGenRootTypes['Program'][]; // [Program!]!
    program: NexusGenRootTypes['Program'] | null; // Program
    programActivity: NexusGenRootTypes['PerformedWorkout'][]; // [PerformedWorkout!]!
    staticExercise: NexusGenRootTypes['StaticExercise'] | null; // StaticExercise
    staticExercises: NexusGenRootTypes['StaticExercise'][]; // [StaticExercise!]!
    trainingTypes: NexusGenEnums['TrainingType'][]; // [TrainingType!]!
    trendingPrograms: NexusGenRootTypes['Program'][]; // [Program!]!
    userPrograms: NexusGenRootTypes['Program'][]; // [Program!]!
    usernameExists: boolean | null; // Boolean
    workout: NexusGenRootTypes['Workout'] | null; // Workout
  };
  Set: {
    // field return type
    exercise: NexusGenRootTypes['Exercise']; // Exercise!
    id: string; // ID!
    number: number; // Int!
    reps: number; // Int!
    rpe: number; // Int!
  };
  StaticExercise: {
    // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    equipment: NexusGenEnums['Equipment'] | null; // Equipment
    exercise: NexusGenRootTypes['Exercise'][]; // [Exercise!]!
    id: string; // ID!
    movement: NexusGenEnums['Movement']; // Movement!
    name: string; // String!
    primaryTargetMuscle: NexusGenEnums['Muscle']; // Muscle!
    secondaryTargetMuscle: NexusGenEnums['Muscle'] | null; // Muscle
    tertiaryTargetMuscle: NexusGenEnums['Muscle'] | null; // Muscle
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  };
  User: {
    // field return type
    email: string; // String!
    id: string; // ID!
    password: string; // String!
    profile: NexusGenRootTypes['Profile'] | null; // Profile
  };
  UserResponse: {
    // field return type
    error: NexusGenRootTypes['AppError'] | null; // AppError
    user: NexusGenRootTypes['User'] | null; // User
  };
  Workout: {
    // field return type
    exercises: NexusGenRootTypes['Exercise'][]; // [Exercise!]!
    id: string; // ID!
    name: string; // String!
    program: NexusGenRootTypes['Program'] | null; // Program
    programId: string | null; // String
    trainingLevel: NexusGenEnums['TrainingLevel'] | null; // TrainingLevel
    trainingType: NexusGenEnums['TrainingType'][]; // [TrainingType!]!
  };
}

export interface NexusGenFieldTypeNames {
  AppError: {
    // field return type name
    createdAt: 'String';
    message: 'String';
    name: 'String';
  };
  Exercise: {
    // field return type name
    authorNotes: 'String';
    id: 'ID';
    order: 'Int';
    sets: 'Set';
    staticExercise: 'StaticExercise';
    supersetOrder: 'String';
  };
  Mutation: {
    // field return type name
    addProgramToLibrary: 'Profile';
    createExercise: 'Exercise';
    createProgram: 'Program';
    createSet: 'Set';
    createWorkout: 'Workout';
    finishWorkout: 'PerformedWorkout';
    follow: 'Profile';
    login: 'String';
    signup: 'Boolean';
    startWorkout: 'PerformedWorkout';
    unfollow: 'Profile';
    updateCompletionStatus: 'PerformedSet';
    updateProgramIcon: 'Program';
    updateSetReps: 'Set';
    updateSetRpe: 'Set';
    updateWorkoutName: 'Workout';
  };
  PerformedExercise: {
    // field return type name
    exercise: 'Exercise';
    id: 'ID';
    notes: 'String';
    performedSets: 'PerformedSet';
    performedWorkout: 'PerformedWorkout';
  };
  PerformedSet: {
    // field return type name
    completed: 'Boolean';
    completedAt: 'DateTime';
    duration: 'Int';
    id: 'ID';
    performedExercise: 'PerformedExercise';
    reps: 'Int';
    set: 'Set';
    weight: 'Float';
  };
  PerformedWorkout: {
    // field return type name
    active: 'Boolean';
    createdAt: 'DateTime';
    duration: 'Int';
    id: 'ID';
    notes: 'String';
    performedExercises: 'PerformedExercise';
    profile: 'Profile';
    program: 'Program';
    tonnage: 'Float';
    workout: 'Workout';
  };
  Profile: {
    // field return type name
    authoredPrograms: 'Program';
    createdAt: 'DateTime';
    dateOfBirth: 'DateTime';
    defaultColor: 'String';
    followedBy: 'Profile';
    following: 'Profile';
    gender: 'Gender';
    goals: 'TrainingType';
    height: 'Int';
    id: 'ID';
    name: 'String';
    performedWorkouts: 'PerformedWorkout';
    programLibrary: 'Program';
    trainingAge: 'TrainingLevel';
    updatedAt: 'DateTime';
    user: 'User';
    username: 'String';
    weight: 'Int';
  };
  Program: {
    // field return type name
    authors: 'Profile';
    complimentary: 'Boolean';
    defaultEmojiHex: 'String';
    defaultImageColor: 'String';
    id: 'ID';
    inLibraryOf: 'Profile';
    likes: 'Int';
    name: 'String';
    performedWorkouts: 'PerformedWorkout';
    publicity: 'Publicity';
    trainingLevel: 'TrainingLevel';
    trainingType: 'TrainingType';
    workouts: 'Workout';
  };
  Query: {
    // field return type name
    activeFollowers: 'PerformedWorkout';
    activeWorkout: 'PerformedWorkout';
    browseSearch: 'BrowseResponseTypeUnion';
    emailExists: 'Boolean';
    exercise: 'Exercise';
    exerciseHistory: 'PerformedExercise';
    followerWorkoutActivity: 'PerformedWorkout';
    lastPerformedWorkout: 'PerformedWorkout';
    me: 'User';
    myFollowers: 'Profile';
    myFollowersCount: 'Int';
    myFollows: 'Profile';
    myFollowsCount: 'Int';
    myProfile: 'Profile';
    performedWorkoutFromId: 'PerformedWorkout';
    popularPrograms: 'Program';
    profileFromId: 'Profile';
    profilePrograms: 'Program';
    program: 'Program';
    programActivity: 'PerformedWorkout';
    staticExercise: 'StaticExercise';
    staticExercises: 'StaticExercise';
    trainingTypes: 'TrainingType';
    trendingPrograms: 'Program';
    userPrograms: 'Program';
    usernameExists: 'Boolean';
    workout: 'Workout';
  };
  Set: {
    // field return type name
    exercise: 'Exercise';
    id: 'ID';
    number: 'Int';
    reps: 'Int';
    rpe: 'Int';
  };
  StaticExercise: {
    // field return type name
    createdAt: 'DateTime';
    description: 'String';
    equipment: 'Equipment';
    exercise: 'Exercise';
    id: 'ID';
    movement: 'Movement';
    name: 'String';
    primaryTargetMuscle: 'Muscle';
    secondaryTargetMuscle: 'Muscle';
    tertiaryTargetMuscle: 'Muscle';
    updatedAt: 'DateTime';
  };
  User: {
    // field return type name
    email: 'String';
    id: 'ID';
    password: 'String';
    profile: 'Profile';
  };
  UserResponse: {
    // field return type name
    error: 'AppError';
    user: 'User';
  };
  Workout: {
    // field return type name
    exercises: 'Exercise';
    id: 'ID';
    name: 'String';
    program: 'Program';
    programId: 'String';
    trainingLevel: 'TrainingLevel';
    trainingType: 'TrainingType';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    addProgramToLibrary: {
      // args
      programId: string; // String!
    };
    createExercise: {
      // args
      staticExerciseId: string; // String!
      workoutId: string; // String!
    };
    createProgram: {
      // args
      input: NexusGenInputs['CreateProgramInput']; // CreateProgramInput!
    };
    createSet: {
      // args
      exerciseId: string; // String!
    };
    createWorkout: {
      // args
      programId: string; // String!
    };
    finishWorkout: {
      // args
      performedWorkoutId: string; // String!
    };
    follow: {
      // args
      profileId: string; // String!
    };
    login: {
      // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    };
    signup: {
      // args
      input: NexusGenInputs['SignUpInput']; // SignUpInput!
    };
    startWorkout: {
      // args
      workoutId: string; // String!
    };
    unfollow: {
      // args
      profileId: string; // String!
    };
    updateCompletionStatus: {
      // args
      currentStatus: boolean; // Boolean!
      performedSetId: string; // String!
    };
    updateProgramIcon: {
      // args
      defaultEmojiHex: string; // String!
      programId: string; // String!
    };
    updateSetReps: {
      // args
      reps: number; // Int!
      setId: string; // String!
    };
    updateSetRpe: {
      // args
      rpe: number; // Int!
      setId: string; // String!
    };
    updateWorkoutName: {
      // args
      name: string; // String!
      workoutId: string; // String!
    };
  };
  Query: {
    browseSearch: {
      // args
      keyword: string; // String!
    };
    emailExists: {
      // args
      email: string; // String!
    };
    exercise: {
      // args
      exerciseId: string; // String!
    };
    exerciseHistory: {
      // args
      currentPerformedExercise?: string | null; // String
      exerciseId: string; // String!
    };
    performedWorkoutFromId: {
      // args
      id: string; // String!
    };
    popularPrograms: {
      // args
      skip: number; // Int!
      take: number; // Int!
      trainingType?: NexusGenEnums['TrainingType'][] | null; // [TrainingType!]
    };
    profileFromId: {
      // args
      id: string; // String!
    };
    profilePrograms: {
      // args
      profileId: string; // String!
    };
    program: {
      // args
      programId: string; // String!
    };
    programActivity: {
      // args
      programId: string; // String!
    };
    staticExercise: {
      // args
      staticExerciseId: string; // String!
    };
    trendingPrograms: {
      // args
      skip: number; // Int!
      take: number; // Int!
      trainingType?: NexusGenEnums['TrainingType'][] | null; // [TrainingType!]
    };
    usernameExists: {
      // args
      username: string; // String!
    };
    workout: {
      // args
      workoutId: string; // String!
    };
  };
}

export interface NexusGenAbstractTypeMembers {
  BrowseResponseTypeUnion: 'Exercise' | 'Profile' | 'Program' | 'Workout';
}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = 'BrowseResponseTypeUnion';

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: ctx;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
