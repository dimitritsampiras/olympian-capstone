// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  name     String
  email    String   @unique
  username String   @unique
  password String
  profile  Profile?
}

model Profile {
  id          String         @id @default(cuid())
  dateOfBirth DateTime?
  gender      Gender?
  weight      Int?
  height      Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  trainingAge TrainingLevel?
  goals       Specificity[]
  programs    Program[]
  user        User           @relation(fields: [userId], references: [id])
  userId      String         @unique
}

model Program {
  id                       String         @id @default(cuid())
  name                     String
  // complimentary to other programs. for searching purposes
  // i.e. stretch routine etc. 
  complimentary            Boolean?
  // type of training for searching purposes
  specificity              Specificity[]
  // optionally provide training level recommended for program
  trainingLevel            TrainingLevel?
  // list of tags for search purposes
  tags                     String[]
  publicity                Publicity
  // public stuff
  likes                    Int?
  profileImageDefaultColor String         @default("e0e7ff") @db.VarChar(7)
  profileImageDefaultEmoji String         @default("1F93C") @db.VarChar(5)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  workouts                 Workout[]
  profile                  Profile        @relation(fields: [profileId], references: [id])
  profileId                String
}

model Workout {
  id            String         @id @default(cuid())
  name          String
  specificity   Specificity[]
  trainingLevel TrainingLevel?
  tags          String[]
  duration      DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  exercises     Exercise[]
  program       Program?       @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId     String?
}

model Exercise {
  id               String         @id @default(cuid())
  sets             Int?
  reps             Int?
  duration         Int?
  rpe              Int?
  authorNotes      String?
  staticExercise   StaticExercise @relation(fields: [staticExerciseId], references: [id])
  staticExerciseId String
  workout          Workout?       @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId        String?
  performedSet     PerformedSet[]
}

model PerformedSet {
  id         String   @id @default(cuid())
  setNumber  Int?
  weight     Float?
  reps       Int?
  duration   Int?
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
}

model StaticExercise {
  id                    String     @id @default(cuid())
  name                  String
  movement              Movement
  primaryTargetMuscle   Muscle
  secondaryTargetMuscle Muscle?
  tertiaryTargetMuscle  Muscle?
  equipment             Equipment?
  description           String
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  exercise              Exercise[]
}

enum Specificity {
  general
  strength
  hypertrophy
  athleticism
  cardio
}

enum Gender {
  male
  female
}

enum TrainingLevel {
  beginner
  intermediate
  advanced
}

enum Publicity {
  private
  public
  friends
}

enum Muscle {
  trapezius
  upper_back
  lower_back
  chest
  biceps
  triceps
  forearm
  back_deltoids
  middle_deltoids
  front_deltoids
  abs
  obliques
  adductor
  hamstring
  quadriceps
  abductors
  calves
  gluteal
  head
  neck
}

enum Movement {
  vertical_push
  horizontal_push
  vertical_pull
  horizontal_pull
  knee_dominant
  hip_dominant
  carry
  isolation
  flexion
  extension
  internal_rotation
  external_rotation
  elevation
  rotation
  anti_extension
  anti_rotation
  anti_lateral_flexion
  explosive
}

enum Equipment {
  barbell
  dumbbell
  machine
  band
  ball
  cable
  kettlebell
  resistance_band
  suspension_trainer
  bodyweight
  bench
  box
  foam_roller
  medicine_ball
  sandbag
  sled
  trap_bar
  weighted_vest
}
